{"name":"Warmars-4.0","tagline":"A ultima versão do jogo de tiros em marte com a implementação dos padrões de projetos Comportamental.","body":"## War Mars ##\r\n\r\n**War Mars** é um jogo que está sendo desenvolvido para Windows/Linux/MacOS na linguagem Python.\r\n\r\nAutor: Antonio (anribrasil@gmail.com)\r\n\r\n### Seções\r\n1. Padrão de projetos\r\n2. Padrões comportamentais\r\n3. Cadeia de Responsabilidade\r\n4. Iterador\r\n5. Mediador\r\n6. Observador\r\n7. Estado\r\n8. Estratégia\r\n9. Visitador\r\n\r\n### 1. Padrões de projeto ###\r\n\r\nPadrões de projeto é uma solução geral reutilizável para um problema que ocorre com frequência dentro de um determinado contexto no projeto de software. [Wikipedia, 2015]. \r\n\r\n### 2. Padrões comportamentais\r\n\r\n\r\nOs padrões comportamentais são relacionados aos comportamentos dos objetos.\r\n\r\n### 3. Cadeia de Responsabilidade\r\n\r\nA cadeia de responsabilidade serve para evitar o acoplamento de uma requisição com os receivers que irão tratar a requisição. Ela então passa\r\npor cada objeto até tratar a requisição. \r\n\r\nNão houve necessidade de implementação deste padrão de projetos no trabalho pois sua implementação não foi necessária.\r\n\r\n### 4. Iterador\r\n\r\nO Iterador foi representado no trabalho por meio do acesso aos objetos sem saber a representação interna. Abaixo segue um trecho do codigo onde o iterador teve\r\nutilidade no trabalho. \r\n![Iterator]( https://github.com/Corlobin/WarMars-4.0/blob/master/Padrao%20Iterator.png?raw=true)\r\n\r\n### 5. Mediador\r\nO mediador define um objeto que encapsula as interações de um conjunto de objetos. No trabalho, o nosso mediador foi nada mais do que o Controlador do Menu, ele foi o responsavel por realizar as iterações dos objetos restantes, mostrando a tela respectiva de cada Estado do jogo. Abaixo segue o diagrama do padrão Mediador implementado no Projeto.\r\n\r\n![Mediador](https://raw.githubusercontent.com/Corlobin/WarMars-4.0/master/Diagrama_Mediador.jpg)\r\n\r\n### 6. Observador\r\n\r\nO observador define a dependência de um objeto perante outros objetos, e assim, quando o estado de um objeto é mudado, os objetos dependentes são notificados e atualizados automaticamente. No trabalho, não houve a necessidade de implementação do padrão observador porque eu não precisei observar o comportamento de outro objeto;\r\n\r\n### 7. Estado\r\n\r\nO padrão permite que o objeto mude seu comportamento conforme o seu estado. Não houve implementação do padrão Estado no projeto. No jogo foi implementado para modificar o estado do helicoptero, lhe dando mais balas e munições para ele metralhar os inimigos! :)\r\n\r\n![State](https://raw.githubusercontent.com/Corlobin/WarMars-4.0/master/PadraoState.png)\r\n\r\n### 8. Estratégia, Visitador\r\n\r\nNão houve implementação do padrão Estratégia e Visitador. Sem necessidade de utilização no codigo.\r\n\r\n### 10. Memento\r\n\r\nFoi implementado caso acontecesse algum problema com relação ao jogador. \r\n\r\n![Memento](https://github.com/Corlobin/WarMars-4.0/blob/master/Memento.png?raw=true)\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}